FORMAT: 1A
HOST: http://duino-k.local

# Overview

接続モジュールのセンサー値取得や制御を行うWebAPIです。

レスポンス仕様は[Jsend](https://labs.omniti.com/labs/jsend)に準拠しています。


::: note
当ドキュメントに記載の場合でも、実際に使用可能なエンドポイントはビルド構成によって異なります。
:::


## WebSocket

一部のモジュールはWebSocketを通じて状態の変化を受信できます。

対応モジュール: `AnalogSensor`, `InputSwitch`, `OutputSwitch`, `HygroThermoSensor`

::: note
短い間隔でAPIを繰り返し呼び出すことは避けてください。
esp8266はPC等と比べて非常に限られたリソースで動作しています。
:::

WebSocket APIはポート81番に対してwsプロトコルで接続することで利用できます。
Webブラウザーから利用するには以下のようなコードになるでしょう。

```js
const socket = new WebSocket('ws://duino-k.local:81')
socket.onmessage = event => {
    const data = JSON.parse(event.data)
    switch (data.event) {
        case "init":
            console.log(data)
            break
        case "update":
            console.log(data)
            break
    }
}
```

**`update`イベント**

モジュールの状態に変化があった場合に送出されるメッセージです。

```js
{
  "event": "update",
  "resource": "/sensor/ht",
  "data": {
    "temperature": 27,
    "humidity": 49
  }
}
```

**`init`イベント**

サーバーとの接続確立時に送出されるメッセージです。
現在のモジュール状態一覧を取得できます。

```js
{
  "event": "init",
  "resource": "*",
  "items": [
    {
      "resource": "/switch/motion",
      "data": {
        "state": false,
        "updated": 1527482615
      }
    },
    {
      "resource": "/sensor/ht",
      "data": {
        "temperature": 27,
        "humidity": 49
      }
    },
    {
      "resource": "/sensor/brightness",
      "data": {
        "value": 478
      }
    }
  ]
}
```

より詳しい使用方法は[duino-klutch-client](https://github.com/yamorijp/duino-klutch-client)のソースコードが参考になります。
この小さなブラウザアプリではWebSocket APIを通じて値の取得を行っています。


## ソースコード

**duino-klutch**

esp8266用のWebAPIサーバーです。

https://github.com/yamorijp/duino-klutch


**duino-klutch-client**

ブラウザ上で動作するクライアントアプリです。

https://github.com/yamorijp/duino-klutch-client


**duino-klutch-demo-server**

APIのスタブを提供するデモ用サーバーです。

https://github.com/yamorijp/duino-klutch-demo-server



## Data Structure

### Success

+ status: `success` (string)
+ data (object, nullable)

### State

+ status: `success` (string)
+ data (object)
    + state: `true` (boolean)
    + updated: `1527481037` (number)

### CdS

+ status: `success` (string)
+ data (object)
    + value: `34` (number)

### Ht

+ status: `success` (string)
+ data (object)
    + temperature: `27` (number)
    + humidity: `49` (number)


### Rgb

+ status: `success` (string)
+ data (object)
    + red: `100` (number)
    + green: `64` (number)
    + blue: `32` (number)

### HandlerInfo

+ name: `Temperature & Humidity` (string)
+ type: `HygroThermoSensor` (string)
+ group: `sensor` (string)
+ resource: `/sensor/ht` (string)


# Group Switch


## リレースイッチ [/switch/relay]

リレースイッチを操作します。

モジュール: `handlers/OutputSwitch.h`

### オン [GET /switch/relay/on]

HIGH信号を送出してスイッチをONにします。

+ Response 200 (application/json)
    + Attribute (State)

### オフ [GET /switch/relay/off]

LOW信号を送出してスイッチをOFFにします。

+ Response 200 (application/json)
    + Attribute (State)

### トグル [GET /switch/relay/toggle]    

スイッチの状態を反転します。

+ Response 200 (application/json)
    + Attribute (State)

### スイッチ状態 [GET /switch/relay/state]

スイッチ状態を取得します。

+ Response 200 (application/json)
    + Attribute (State)


## モーション感知スイッチ [/switch/motion]

マイクロ波レーダーセンサースイッチモジュール(RGWL-0516)の状態を取得します。

モジュール: `handlers/InputSwitch.h`

### 感知状態 [GET /switch/motion/state]

センサースイッチモジュールのOUT出力を読み取り検出状態を返します。

+ Response 200 (application/json)
    + Attribute (State)



# Group LED


## RGB LED [/led/rgb]

RGB LEDを操作します。

モジュール: `handlers/RGBLed.h`

### 点灯 [GET /led/rgb/on{?data}]

指定したRGB色でLEDを点灯します。

Color | Mask
------|---------
R     | 0xFF0000
G     | 0x00FF00
B     | 0x0000FF

+ Parameters
    + data: `ff013c` (string, optional) - HEX指定のRGBカラー
      + Default: `ffffff`

+ Response 200 (application/json)
    + Attribute (Rgb)

### 消灯 [GET /led/rgb/off]

LEDを消灯します。

+ Response 200 (application/json)
    + Attribute (Rgb)

### 点灯状況 [GET /led/rgb/state]

LEDの点灯状況を取得します。

+ Response 200 (application/json)
    + Attribute (Rgb)


## 4桁7セグメントLED [/led/4digit]

TM1637を使用した4桁7セグメントディスプレイモジュールを操作します。

モジュール: `handlers/FourDigitLed.h`

### ディスプレイ消灯 [GET /led/4digit/clear]

ディスプレイを消灯します。

+ Response 200 (application/json)
    + Attribute (Success)

### 数値 [GET /led/4digit/number{?data,leading_zero,brightness}]

指定した数値をディスプレイへ表示します。

+ Parameters
    + data: `1234` (number, required) - 表示する4桁の数値 (0-9999)
    + leading_zero: `1` (number, optional) - 不足している桁を0埋めします (0|1)
      + Default: `0`
    + brightness: `7` (number, optional) - 明るさ (1-7)
      + Default: `4`

+ Response 200 (application/json)
    + Attribute (Success)

### セグメント [GET /led/4digit/segments{?data,brightness}]

セグメント単位での指定でLEDを点灯します。
表示内容はLED点灯状態を表す16進数表記を桁毎に指定します。

セグメントとビットフラグの対応は以下の通りです。

``` no-highlight
 ---               D:00001000(8)
|  |     C:00000100(4)  E:00010000(16)
 ---               G:01000000(64)
|  |     B:00000010(2)  F:00100000(32)
 ---               A:00000001(1)
```

::: note
例として数字の" -20"を表示するケースを考えます。
数字の"2"は以下のセグメントを点灯することで表せます。

`D, E, G, B, A`

各セグメントに対応するビットを立てた値を合算すると"01011011"が求まります。
これを16進数表記へ変換すると"5b"となります。

`0b00000001 | 0b00000010 | 0b01000000 | 0b00010000 | 0b00001000 = 0b01011011 = 0x5b`

数字の"0"は以下のセグメントを点灯させます。

`D, E, F, A, B, C`

同様にして16進数表記を求めると"3f"となります。

マイナス記号"-"はSEG7を点灯で"40"となります。
空白の桁は全てのセグメントを点灯させないません。16進数表記では"00"となります。

値の指定は右端の桁から行います。
これらを統合すると" -20"を表示するには"3f5b4000"を指定すれば良いことがわかります。
また、4桁に満たない場合は"00"が補間されるので" -20"の場合は"3f5b40"とすることも可能です。
:::

::: note

コロンを点灯させるには2桁目に`0b10000000`を追加します

:::


+ Parameters
    + data: `ff00ff00ff00ff00` (string, required) - 桁毎のLED点灯状態を表す16進数表記文字列
    + brightness: `7` (number, optional) - 明るさ (0-7)
      + Default: `4`

+ Response 200 (application/json)
    + Attribute (Success)

### カウントアップ／ダウン [GET /led/4digit/counting{?from,to,step,brightness}]

数値をカウントアップ／ダウンさせながら表示します。

+ Parameters
    + from: `100` (number, optional) - 開始数値 (0-9999)
      + Default: `0`
    + to: `9999` (number, optional) - 完了数値 (0-9999)
      + Default: `0`
    + step: `10` (number, optional) - ステップ (1-9999)
      + Default: `1`
    + brightness: `7` (number, optional) - 明るさ (1-7)
      + Default: `4`

+ Response 200 (application/json)
    + Attribute (Success)

### ロール [GET /led/4digit/roll{?min,max,brightness}]

minからmaxの数値をランダムで表示します。

+ Parameters
    + min: `3` (number, optional) - 最小数値 (0-9999)
      + Default: 0
    + max: `15` (number, optional) - 最大数値 (0-9999)
      + Default: 9999
    + brightness: `7` (number, optional) - 明るさ (1-7)
      + Default: `4`

+ Response 200 (application/json)
    + Attribute
        + status: success (string)
        + data (object)
            + roll: 12 (number)


## 8x8マトリクスLED [/led/matrix]

MAX7219を使用した8x8マトリクスLEDディスプレイを操作します。

モジュール: `handlers/MatrixLed.h`


### マトリクスLED消灯 [GET /led/matrix/clear]

表示中のメッセージをクリアして、ディスプレイを消灯します。

+ Response 200 (application/json)
    + Attribute (Success)


### メッセージ [GET /led/matrix/message{?data,n,instant}]

指定したメッセージをディスプレイへスクロールさせながら表示します。
instantフラグに`1`を指定しない場合、メッセージはキューイングされます。

::: warning
メッセージはASCII文字のみ対応しています。
:::

+ Parameters
    + data: `hello` (string, required) - メッセージ
    + n: `3` (number, optional) - 再生回数 (-1=無限再生, -1-100)
      + Default: `1`
    + instant: `1` (number, optional) - キューをクリア (0|1)
      + Default: `0`

+ Response 200 (application/json)
    + Attribute (Success)

### 次のメッセージ [GET /led/matrix/next]

キューイングしている次のメッセージを再生します。

+ Response 200 (application/json)
    + Attribute (Success)


### 列指定 [GET /led/matrix/columns{?data}]

LED点灯状態を列単位で指定して点灯させます。

::: note
表示内容の指定は点灯LEDに対応するビットを立てた16進数表示を使用します。
例えば"○"記号を表示する場合は以下のようになります。

``` no-highlight
1) 00000000 -> 0x00
2) 00011000 -> 0x18
3) 00100100 -> 0x24
4) 01000010 -> 0x42
5) 01000010 -> 0x42
6) 00100100 -> 0x24
7) 00011000 -> 0x18
8) 00000000 -> 0x00
```

全ての列を結合して"0018244242241800"となります。
:::

+ Parameters
    + data: `FF182442422418FF` (string) - 点灯LEDに対応するビットを立てた16進数表記文字列

+ Response 200 (application/json)
    + Attribute (Success)



# Group Sensor


## 湿温度 [/sensor/ht]

湿温度センサーモジュール(DHT11)から値を読み込みます。

モジュール: `handlers/HygroThermoSensor.h`


### 温湿度 [GET /sensor/ht]

摂氏温度と湿度を取得します。

+ Response 200 (application/json)
    + Attribute(Ht)


## 明るさセンサー [/sensor/brightness]

明るさセンサー(CdS)から値を読み込みます。

モジュール: `handlers/AnalogSensor.h`


## 明るさ [GET /sensor/brightness]

周辺環境の明るさを取得します。1-1024の範囲で周囲が明るいほど小さな値を示します。

+ Response 200 (application/json)
    + Attribute (CdS)



# Group IR

## 赤外線送信 [/ir/transmitter]

赤外線送信モジュールを使用してリモコンコードを送信します。

モジュール: `handlers/IRTransmitter.h`, `handlers/MyHomeIRTransmitter.h`


### Raw [GET /ir/transmitter/raw{?data,hz}]

IRrecvでキャプチャしたrawデータを送信します。

+ Parameters
    + data: `3298,1748,358,1326,358,484,358,484,358,484,358,484` (string, required) - カンマ区切りの数値
    + hz: `38` (number, optional) - 送信周波数
      + Default: `32`

+ Response 200 (application/json)
    + Attribute (Success)


### 送信 [GET /ir/transmitter/send{?type,data,bits}]

リモコンコードを送信します。

#### タイプの一覧

メーカー   | 番号
---------|------
RC5 | 1
RC6 | 2
NEC | 3
SONY | 4
PANASONIC | 5
JVC | 6
SAMSUNG | 7
WHYNTER | 8
AIWA_RC_T501 | 9
LG | 10
SANYO | 11
MITSUBISHI | 12
DISH | 13
SHARP | 14
COOLIX | 15
DAIKIN | 16
DENON | 17
KELVINATOR | 18
SHERWOOD | 19
MITSUBISHI_AC | 20
RCMM | 21
SANYO_LC7461 | 22
RC5X | 23
GREE | 24
PRONTO | 25
NEC_LIKE | 26
ARGO | 27
TROTEC | 28
NIKAI | 29
RAW | 30
GLOBALCACHE | 31
TOSHIBA_AC | 32
FUJITSU_AC | 33
MIDEA | 34
MAGIQUEST | 35
LASERTAG | 36
CARRIER_AC | 37
HAIER_AC | 38
MITSUBISHI2 | 39
HITACHI_AC | 40

::: note
NECフォーマット32bitsで"0xFFE01FUL"を送信する例：
``` no-highlight
/ir/transmitter/raw?type=3&data=ffe01f&bits=32
```
:::

+ Parameters
    + data: `ffe01f` (string, required) - 送信コードを16進数表記で指定します
    + type: `3` (number, required) - フォーマットを指定します (1-40)
    + bits: `32` (number, required) - ビット数を指定します (1-)

+ Response 200 (application/json)
    + Attribute (Success)

### コマンド [GET /ir/transmitter/command{?data}]

定義済みのリモコンコマンドを送出します。
拡張赤外線通信モジュールを使用している場合のみ使用できます。

#### リモコンコマンド一覧

コマンド名         | 概要
----------------|--------------------
koizumi_cl_off  | 照明をOFF
koizumi_cl_hi   | 照明を全灯モードでON
koizumi_cl_med  | 照明を調灯モードでON
koizumi_cl_low  | 照明を豆球モードでON
hitachi_ac_off  | エアコンをOFF
hitachi_ac_heat | エアコンを暖房モードでON
hitachi_ac_cool | エアコンを冷房モードでOFF

+ Parameters
    + data: `koizumi_cl_off` (string, required) - コマンド名を指定します

+ Response 200 (application/json)
    + Attribute (Success)


# Group Others

## その他 [/]

デバイス操作を提供します。

モジュール: `handlers/Site.h`, `handlers/HandlerCOntainer.h`

### リセット [GET /reset]

デバイスをリセットします。

::: note
ESP.reset() is a hard reset and can leave some of the registers in the old state
which can lead to problems, its more or less like the reset button on the PC.
:::

+ Response 200 (application/json)
    + Attribute (Success)

### 再起動 [GET /restart]

デバイスを再起動します。

::: note
ESP.restart() tells the SDK to reboot, so its a more clean reboot,
use this one if possible.
:::

::: warning
the boot mode:(1,7) problem is known and only happens at the first restart after serial flashing.
if you do one manual reboot by power or RST pin all will work more info
see: [#1017](https://github.com/esp8266/Arduino/issues/1017)
:::

+ Response 200 (application/json)
    + Attribute (Success)


### ヒープメモリ [GET /heap]

デバイスのメモリー状況を取得します。

+ Response 200 (application/json)
    + Attribute
        + status: success (string)
        + data (object)
            + vcc: 65535 (number)
            + free_heap: 33000 (number)
            + free_sketch_space: 2818948 (number)


### モジュール情報 [GET /_handlers]

有効なハンドラーモジュールの一覧を取得します。

+ Response 200 (application/json)
    + Attribute
        + status: success (string)
        + data (object)
            + items (array[HandlerInfo])
